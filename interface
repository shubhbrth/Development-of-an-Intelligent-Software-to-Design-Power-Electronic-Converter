#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 26 11:32:19 2018

@author: shubham
"""
    
from PyQt5.QtWidgets import (QApplication, QDialog,
        QDialogButtonBox, QFormLayout, QGridLayout, QGroupBox, QHBoxLayout,
        QLabel, QLineEdit, QMenu, QTextEdit,
        QVBoxLayout,QMessageBox)
import sys
#Library to read csv file
import pandas as pd
#Numpy Array
import numpy as np

#%% 
class Dialog(QDialog):
    
    NumGridRows = 3
    NumButtons = 4
    def __init__(self):
        super(Dialog, self).__init__()
#        global Component_file_name
        self.Component_file_name=['Capacitor_Specification','Diode_Specification','IGBT_Specification','MOSFET_Specification','Inductor_Specification']
        self.number_of_component=5
        self.createFormGroupBox()
        self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)      
        self.buttonBox.accepted.connect(self.evaluate_values)
        self.buttonBox.rejected.connect(self.reject)
        
        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.formGroupBox)
        mainLayout.addWidget(self.buttonBox)
        self.setLayout(mainLayout)
 
        self.setWindowTitle("Development of an Intelligent Software to Design Power Electronic Converter")
 
    def createFormGroupBox(self):
        self.formGroupBox = QGroupBox("Enter Required Details")
        layout = QFormLayout()
        self.Voltage_input_max =QLineEdit()
        self.Voltage_input_min = QLineEdit()
        self.Voltage_out=QLineEdit()
        self.Current_out=QLineEdit()
        self.Switching_frequency=QLineEdit()
        layout.addRow(QLabel("Maximum input voltage, VIN,MAX (Volt):"), self.Voltage_input_max)
        layout.addRow(QLabel("Minimum input voltage, VIN,MIN  (Volt):"),self.Voltage_input_min)
        layout.addRow(QLabel("Output voltage, VOUT  (Volt):"), self.Voltage_out)
        layout.addRow(QLabel("Output current, IOUT (Ampere):"), self.Current_out)
        layout.addRow(QLabel("Switching frequency, fS (Hertz):"), self.Switching_frequency)
        self.formGroupBox.setLayout(layout)
 
    def evaluate_values(self):
#        Maximum Input Voltage
        V_in_max=int(self.Voltage_input_max.text())
#        Minimum Input Voltage        
        V_in_min=int(self.Voltage_input_min.text())
#        Output Voltage
        V_out=int(self.Voltage_out.text())
#        Output Current
        I_out=int(self.Current_out.text())
#        Switching Frequency
        Fs=int(self.Switching_frequency.text())
        Ts=1/Fs
#        del_I_L
        Inductor_current_ripple=30*I_out/100
#        del_V_o
        Output_voltage_ripple=V_out/100
#        Duty Cycle
        D=V_out/V_in_max
#        Inductor Value
        L=((V_in_max-V_out)*D*Ts)/Inductor_current_ripple
#        Capacitor Value
        C=(Inductor_current_ripple*Ts)/(8*Output_voltage_ripple)
        Drain_source_Voltage=V_in_max*2
        Continuous_drain_current=I_out*D*1.5
        Forward_current=I_out*(1-D)*1.5
        Irms=(((I_out)**2)+(((Inductor_current_ripple)**2)/12))**(0.5)
        Capacitor_voltage=(V_out+(Output_voltage_ripple)/2)*2
#        Dialog.search_component(self.Component_file_name[0])
        
        Capacitor=Dialog.capicator_specification(self.Component_file_name[0],Capacitor_voltage,C)
        Diode=Dialog.diode_specification(self.Component_file_name[1],Forward_current)  #use forward current
        Inductor=Dialog.inductor_specification(self.Component_file_name[4],L,Irms)
        if Drain_source_Voltage>=250:
            Igbt=Dialog.igbt_specification(self.Component_file_name[2],Continuous_drain_current,Drain_source_Voltage)
            Igbt_Mosfet=Igbt
            QMessageBox.about(self, "Components Found","Selected Capacitor is"+Capacitor+"\nSelected Diode is "+Diode+"\nSelected Inductor is "+Inductor+"\nSelected Igbt is "+Igbt_Mosfet)
        else:
            Mosfet=Dialog.mosfet_specification(self.Component_file_name[3],Continuous_drain_current,Drain_source_Voltage)
            Igbt_Mosfet=Mosfet
            QMessageBox.about(self, "Components Found","Selected Capacitor is"+Capacitor+"\nSelected Diode is "+Diode+"\nSelected Inductor is "+Inductor+"\nSelected Igbt is "+Igbt_Mosfet)
#        dialog.message_box1(Capacitor,Diode,Igbt_Mosfet,Inductor)
        
            
    def capicator_specification(file_name,Capacitor_voltage,C):
        data_file=pd.read_csv(file_name+'.csv')
        data=np.array(data_file)
        size=data.shape
        selected=[]

        for i in range(0,size[0]):
            temp_c=data[i][3]
            temp_c=temp_c.replace(" ","")
            temp_v=data[i][4]
            temp_v=temp_v.replace(" ","")
            if temp_c!=' -' and temp_v!=' -':
                if temp_c[-3:]=='ÂµF':
                    temp_c=float(temp_c[:-3])
                    temp_c=temp_c/1000000
                elif temp_c[-2]=='µF':
                    temp_c=float(temp_c[:-2])
                    temp_c=temp_c/1000000
                if temp_v[-1:]=='V':
                    temp_v=float(temp_v[:-1])
                elif temp_v[-2]=='mV':
                    temp_v=float(temp_v[:-2])
                    temp_v=temp_v/1000
                if temp_c>=int(C) and temp_v>=int(Capacitor_voltage):
                    selected.append(i)
                    break
        print("Selected Capacitor is "+str(data[selected[0]][1]))
        return str(data[selected[0]][1])
        
    
    def diode_specification(file_name,Forward_current):
        data_file=pd.read_csv(file_name+'.csv')
        data=np.array(data_file)
        size=data.shape
        selected=[]
        for i in range(0,size[0]):
            temp_value=data[i][3]
            temp_value.replace(" ","")
            if temp_value!=' -':
                if temp_value[-2:]=='mA':
                    value=float(temp_value[:-2])
                    value=value/1000
                else:
                    value=float(temp_value[:-1])
                if Forward_current<=value:
                    selected.append(i) 

        temp=data[selected[0]][4]
        temp.replace(" ","")
        if temp[-2:]=='mV':
            temp=float(temp[:-2])
            temp=temp/1000
        else :
            temp=float(temp[:-1])
        select_comp_index=selected[0]
        for i in range(1,len(selected)):    
            temp_selected=data[selected[i-1]][4]
            temp_selected.replace(" ","")
            if temp_selected!=' -':
                if temp_selected[-2:]=='mV':
                    temp_selected=float(temp_selected[:-2])
                    temp_selected=temp_selected/1000
                else:
                    temp_selected=float(temp_selected[:-1])
                if temp>temp_selected:
                    temp=temp_selected
                    select_comp_index=selected[i-1]
        print('Selected Diode is '+str(data[select_comp_index][1]))
        return str(data[select_comp_index][1])
            
    
    def igbt_specification(file_name,Continuous_drain_current,Drain_source_Voltage):
        data_file=pd.read_csv(file_name+'.csv')
        data=np.array(data_file)
        size=data.shape
        selected=[]
        for i in range(0,size[0]):
            temp_id=data[i][3]
            temp_id=temp_id.replace(" ","")
            temp_vds=data[i][4]
            temp_vds=temp_vds.replace(" ","")
            if temp_id!=' -' and temp_vds!=' -':
                if temp_id[-2:]=='mA':
                    temp_id=float(temp_id[:-2])
                    temp_id=temp_id/1000
                elif temp_id[-1:]=='A':
                    temp_id=float(temp_id[:-1])
                if temp_vds[-2:]=='mV':
                    temp_vds=float(temp_id[:-2])
                    temp_vds=temp_vds/1000
                elif temp_vds[-1:]=='V':
                    temp_vds=float(temp_vds[:-1])
                if temp_id>=Continuous_drain_current and temp_vds>=Drain_source_Voltage:
                    selected.append(i)
                    break
        print("Selected IGBT is "+str(data[selected[0]][1]))
        return str(data[selected[0]][1])
        

    def mosfet_specification(file_name,Continuous_drain_current,Drain_source_Voltage):
        data_file=pd.read_csv(file_name+'.csv')
        data=np.array(data_file)
        size=data.shape
        selected=[]
        for i in range(0,size[0]):
            temp_id=data[i][4]
            temp_id=temp_id.replace(" ","")
            temp_vds=data[i][5]
            temp_vds=temp_vds.replace(" ","")
            if temp_id!=' -' and temp_vds!=' -':
                if temp_id[-2:]=='mA':
                    temp_id=float(temp_id[:-2])
                    temp_id=temp_id/1000
                elif temp_id[-1:]=='A':
                    temp_id=float(temp_id[:-1])
                if temp_vds[-2:]=='mV':
                    temp_vds=float(temp_id[:-2])
                    temp_vds=temp_vds/1000
                elif temp_vds[-1:]=='V':
                    temp_vds=float(temp_vds[:-1])
                if temp_id>=Continuous_drain_current and temp_vds>=Drain_source_Voltage:
                    selected.append(i)
                    break
        print("Selected MOSFET is "+str(data[selected[0]][1]))
        return str(data[selected[0]][1])

        
    def inductor_specification(file_name,L,Irms):
        data_file=pd.read_csv(file_name+'.csv')
        data=np.array(data_file)
        size=data.shape
        selected=[]
        for i in range(0,size[0]):
            temp_inductance=data[i][3]
            temp_irms=data[i][4]
            temp_inductance=temp_inductance.replace(" ","")
            temp_irms=temp_irms.replace(" ","")
            if temp_irms!=' -' and temp_inductance!=' -':
                if temp_inductance[-3:]=="ÂµH":
                    temp_inductance=float(temp_inductance[:-3])
                    temp_inductance=temp_inductance/1000000
                elif temp_inductance[-2:]=="µH":
                    temp_inductance=float(temp_inductance[:-2])
                    temp_inductance=temp_inductance/1000000
                elif temp_inductance[-2:]=="mH":
                    temp_inductance=float(temp_inductance[:-2])
                    temp_inductance=temp_inductance/1000
                elif temp_inductance[-2:]=="nH":
                    temp_inductance=float(temp_inductance[:-2])
                    temp_inductance=temp_inductance/1000000000
                elif temp_inductance[-2:]=="pH":
                    temp_inductance=float(temp_inductance[:-2])
                    temp_inductance=temp_inductance/1000000000000
                if temp_irms[-2:]=="mA":
                    temp_irms=float(temp_irms[:-2])
                    temp_irms=temp_irms/1000
                else:
                    temp_irms=float(temp_irms[:-1])
                if temp_inductance>=int(L) and temp_irms>=int(Irms):
                    selected.append(i)
                    break
        print("Selected Inductor is "+str(data[selected[0]][1]))
        return str(data[selected[0]][1])

        
if __name__ == '__main__':
    app = QApplication(sys.argv)
    dialog = Dialog()
sys.exit(dialog.exec_())